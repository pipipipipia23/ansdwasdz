getgenv().config = {
    buygamepass = false,
    buyonlyslot = true
}

repeat task.wait() until game:IsLoaded()
loadstring(game:HttpGet("https://raw.githubusercontent.com/pipipipipia23/ansdwasdz/refs/heads/main/quanhlow"))()
loadstring(game:HttpGet("https://raw.githubusercontent.com/cuongdevv/trackstat/refs/heads/main/AC_Track.lua"))()

local Services = setmetatable({}, {
    __index = function(_, Name)
        return cloneref(game:GetService(Name))
    end
})

local plr = Services.Players.LocalPlayer
local Storage = Services.ReplicatedStorage
local Network = require(Storage.BridgeNet2)
local EnemiesInfo = require(Storage.Indexer.EnemyInfo)
local PetsInfo = require(Storage.Indexer.PetsInfo)
local BalanceInfo = require(Storage.Indexer.BalanceInfo)
local PetService = require(Storage.SharedModules.PetsService)
local ExtraFunction = require(Storage.SharedModules.ExtraFunctions)
local DPSService = require(Storage.SharedModules.Others.SimpleDps)

local EnemyNetwork = Network.ReferenceBridge("ENEMY_EVENT")
local PetNetwork = Network.ReferenceBridge("PET_EVENT")
local GeneralNetwork = Network.ReferenceBridge("GENERAL_EVENT")

-- Anti AFK
local vu = Services.VirtualUser
plr.Idled:Connect(function()
    vu:Button2Down(Vector2.new(), workspace.CurrentCamera.CFrame)
    task.wait(1)
    vu:Button2Up(Vector2.new(), workspace.CurrentCamera.CFrame)
end)

-- Setup Environment
local Dungeon = game.PlaceId ~= 87039211657390
local havepet = false
getgenv().MaxDPS = 0
getgenv().Dungeon = Dungeon
getgenv().variables = {}

local function setValue(name, value)
    getgenv().variables[name] = {
        value = value,
        lastUpdate = os.clock()
    }
    return value
end

local function getValue(name)
    local data = getgenv().variables[name]
    return data and data.value or nil
end

-- Periodic Tasks
local enemiesblockdungeon = {}
task.spawn(function()
    while true do
        task.wait(10)
        enemiesblockdungeon = {}
    end
end)

task.spawn(function()
    while true do
        task.wait(0.5)
        local currentTime = os.clock()
        for name, data in pairs(getgenv().variables) do
            if currentTime - data.lastUpdate > 5 then
                getgenv().variables[name] = nil
            end
        end
    end
end)

-- Data Setup
local dataMap = {
    SL = CFrame.new(427.5534, 30.6269, -65.1012),
    NR = CFrame.new(-3373.2058, 32.9240, 2247.1914),
    OP = CFrame.new(-3370.8572, 60.8806, -2614.3447),
    BL = CFrame.new(2918.0173, 49.0911, -2381.2175),
    BC = CFrame.new(135.4343, 38.3895, 4403.4580),
}

local dataDungeon = {
    SL = 1500000,
    NR = 150000000,
    OP = 15000000000,
    BL = 100000000000,
    BC = 1000000000000,
}

-- lowest
settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
UserSettings().GameSettings.MasterVolume = 0
UserSettings().GameSettings.SavedQualityLevel = Enum.SavedQualitySetting.QualityLevel1
-- pcall(function() 
--     for i,v in getrunningscripts() do
--         local a,b =pcall(function() 
--             v.Disabled = true
--         end) 
--         if a ~= false then
--             v.Disabled = true
--         end
--     end
-- end)
-- pcall(function()
--     workspace.__Extra:Destroy()
-- end)
-- pcall(function() 
--     plr.PlayerScripts.Scripts:Destroy()
-- end)
-- for k,v in plr.PlayerGui:GetChildren() do 
--     v:Destroy()
-- end
-- pcall(function() 
--     for k,v in game:GetDescendants() do 
--         if v:IsA("RemoteEvent") then 
--             pcall(function() 
--                 for k,v in getconnections(v.OnClientEvent) do 
--                     if getfenv(v.Function).script ~= script then v:Disable() end
--                 end
--             end)
--         end
--     end
-- end)
--

local codedata = { "RUNES", "DRAGONBLUE", "UPDATE" }

--- Redeem Codes
for _, code in pairs(codedata) do
    GeneralNetwork:Fire({Event = "UseCode", Code = code})
    task.wait(1)
end

--- Tween Functions
local function noclip()
	local hrp = plr.Character.HumanoidRootPart
	if not hrp:FindFirstChild("BodyClip") then
		local noclipVelocity = Instance.new("BodyVelocity")
		noclipVelocity.Name = "BodyClip"
		noclipVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
		noclipVelocity.Velocity = Vector3.new(0, 0, 0)
		noclipVelocity.Parent = hrp
	end
end

local function tween(targetCFrame)
    noclip()
	local hrp = plr.Character.HumanoidRootPart
	local distance = (targetCFrame.Position - hrp.Position).Magnitude
	local tween = Services.TweenService:Create(
		hrp,
		TweenInfo.new(distance / 400, Enum.EasingStyle.Linear),
		{CFrame = targetCFrame * CFrame.new(2, 0, 0)}
	)
	tween:Play()
	tween.Completed:Wait()
end

local function tweenfarm(targetCFrame)
    noclip()
	local hrp = plr.Character.HumanoidRootPart
	local distance = (targetCFrame.Position - hrp.Position).Magnitude
	local tween = Services.TweenService:Create(
		hrp,
		TweenInfo.new(distance / 700, Enum.EasingStyle.Linear),
		{CFrame = targetCFrame * CFrame.new(2, 0, 0)}
	)
	tween:Play()
end

--- Get Enemies
local function getEnemies(status)
    local highestHP = 0
    local targetEnemy = nil
    for _, enemy in pairs(Services.CollectionService:GetTagged("EnemyServer")) do
        local enemyAttributes = enemy:GetAttributes()
        if not status then
            if highestHP < enemyAttributes.HP then
                highestHP = enemyAttributes.HP
                targetEnemy = enemy
            end
        else
            if highestHP < enemyAttributes.MaxHP and getgenv().MaxDPS * 150 > enemyAttributes.MaxHP then
                highestHP = enemyAttributes.MaxHP
                targetEnemy = enemy
            end
        end
    end
    return targetEnemy
end

--- Better Boss
local function betterboss(firstName)
    local baseHP, nextBossHP, nextBossName = nil, math.huge, nil

    for _, enemyInfo in pairs(EnemiesInfo) do
        if enemyInfo.TypeG == "BrutesDefeated" and enemyInfo.Arise == firstName then
            baseHP = enemyInfo.HP
            break
        end
    end

    if not baseHP then return nil end

    for _, enemyInfo in pairs(EnemiesInfo) do
        if enemyInfo.TypeG == "BrutesDefeated" and enemyInfo.HP > baseHP and enemyInfo.HP < nextBossHP then
            nextBossHP = enemyInfo.HP
            nextBossName = enemyInfo.Arise
        end
    end

    return nextBossName
end

function GetListPet()
    return Services.Players.LocalPlayer.leaderstats.Equips.Pets:GetAttributes()
end

--- Check Step 2
local function step2check(nameMaxEnemies)
    local sameRankPetCount, sameNamePetCount = 0, 0
    local hasDifferentHighRankPets, allMaxed, rank3, rank5 = false, true, false, false
    fullRank6 = true
    local firstPetName = nil

    local listpet = GetListPet()

    for _, petName in pairs(listpet) do
        havepet = true
        local attrs = plr.leaderstats.Inventory.Pets[petName]:GetAttributes()
        local maxLevel = 50 + 25 * attrs.Rank

        if attrs.Level < maxLevel then
            allMaxed = false
        end

        if attrs.Rank < 6 then
            fullRank6 = false
        end

        if attrs.Rank >= 2 then
            if attrs.Rank >= 3 then
                rank3 = true
            end

            if not firstPetName then
                firstPetName = attrs.Name
                if attrs.Rank >= 5 then
                    rank5 = true
                end
            elseif attrs.Name ~= firstPetName then
                hasDifferentHighRankPets = true
            end
        end

        if attrs.Name == nameMaxEnemies and attrs.Rank >= 2 then
            sameNamePetCount = sameNamePetCount + 1
        end

        if attrs.Rank >= 2 then
            sameRankPetCount = sameRankPetCount + 1
        end
    end

    if not firstPetName then
        fullRank6 = false
    end

    if rank5 then return true end

    if rank3 and allMaxed then
        return betterboss(firstPetName)
    end

    if not hasDifferentHighRankPets and not allMaxed then
        print("Inhere")
        return true
    end

    if hasDifferentHighRankPets and allMaxed then
        return firstPetName
    elseif sameRankPetCount >= ExtraFunction.GetMaxPets(plr) and allMaxed then
        return betterboss(firstPetName)
    end

    if sameNamePetCount >= ExtraFunction.GetMaxPets(plr) then
        return true
    end

    return false
end

--- Get Best Enemy
local function getEnemies2()
    local maxDPSLimit = getgenv().MaxDPS * 100
    local bestEnemy, bestId, bestHP, lowestLvl = nil, nil, 0, math.huge

    for enemyId, enemyInfo in pairs(EnemiesInfo) do
        for mapPrefix in pairs(dataMap) do
            if enemyId:find(mapPrefix) and enemyInfo.TypeG == "BrutesDefeated" and enemyInfo.HP <= maxDPSLimit and enemyInfo.HP > bestHP then
                bestHP = enemyInfo.HP
                bestEnemy = enemyInfo
                bestId = enemyId
            end
        end
    end

    local betterName = step2check(bestEnemy and bestEnemy.Arise or nil)

    if type(betterName) == "string" then
        for enemyId, enemyInfo in pairs(EnemiesInfo) do
            for mapPrefix in pairs(dataMap) do
                if enemyId:find(mapPrefix) and enemyInfo.Arise == betterName and enemyInfo.TypeG == "BrutesDefeated" then
                    bestEnemy, bestId, bestHP = enemyInfo, enemyId, enemyInfo.HP
                    break
                end
            end
        end
    elseif betterName == true or not bestEnemy then
        bestHP = 0
        for enemyId, enemyInfo in pairs(EnemiesInfo) do
            for mapPrefix in pairs(dataMap) do
                if enemyId:find(mapPrefix) and enemyInfo.HP <= maxDPSLimit and enemyInfo.HP > bestHP then
                    bestEnemy, bestId, bestHP = enemyInfo, enemyId, enemyInfo.HP
                end
            end
        end
    end

    local chosenEnemy = nil
    for _, enemy in pairs(Services.CollectionService:GetTagged("EnemyServer")) do
        local attrs = enemy:GetAttributes()
        if attrs.Id == bestId and attrs.Level < lowestLvl then
            chosenEnemy = enemy
            lowestLvl = attrs.Level
        end
    end

    print("Selected enemy:", chosenEnemy, bestId)
    return {chosenEnemy, bestId}
end

--- Get Best Enemy (Dungeon)
local function getEnemiesDungeon()
    local chosenEnemy, lowestHP = nil, math.huge

    for _, enemy in pairs(Services.CollectionService:GetTagged("EnemyServer")) do
        local attrs = enemy:GetAttributes()
        if not table.find(enemiesblockdungeon, enemy.Name) and attrs.HP < lowestHP then
            lowestHP, chosenEnemy = attrs.HP, enemy
        end
    end

    return {chosenEnemy, "CAC"}
end

--- Get List of Equipped Pets
local function GetListPet()
    return Services.Players.LocalPlayer.leaderstats.Equips.Pets:GetAttributes()
end

--- Check Pet Attack Status
local function PetIsAttacking()
    return PetService.AllPetsAttacking(plr)
end

local function PetIsAttackingGetId()
    return PetService.GetCurrentTargets("", plr)[1] or nil
end

--- Attack Enemy
local function Attack()
    local id = getValue("EnemiesId")
    if id then
        EnemyNetwork:Fire({Event = "PunchAttack", Enemy = id})
    end
end

task.spawn(function()
    while not havepet do
        pcall(Attack)
        task.wait(.1)
    end
end)

--- Calculate Pet Damage
local function getPetDamage(petName, maxlvl)
    local petData = plr.leaderstats.Inventory.Pets[petName]
    local petInfo = PetsInfo[petData:GetAttributes().Name]
    local rank = petData:GetAttribute("Rank") or 1
    local baseDamage = petInfo.HitDMG or 1
    local damageMultiplier = BalanceInfo.RankDamageMultiplier[rank] or 1
    local level = maxlvl or petData:GetAttribute("Level") or 1
    return math.floor(baseDamage * damageMultiplier * 1.08313 ^ (level - 1))
end

--- Portal Damage Calculation
local function DamePortal(pet)
    local attrs = pet:GetAttributes()
    local maxLevel = ExtraFunction.GetMaxLevel(attrs.Rank)
    local baseDamage = getPetDamage(pet.Name, maxLevel)
    local scaledDamage = math.log10(baseDamage + 1) * 100000
    return -math.floor(scaledDamage + math.log(getPetDamage(pet.Name) + 1, 2) * 10)
end

--- Equip Maximum Damage Pets
local function equipMaxPet()
    local petsList = {}
    for _, pet in pairs(plr.leaderstats.Inventory.Pets:GetChildren()) do
        local attrs = pet:GetAttributes()
        if attrs.Rank then
            table.insert(petsList, { Name = pet.Name, Order = DamePortal(pet) })
        end
    end

    table.sort(petsList, function(a, b)
        return a.Order < b.Order
    end)

    local equipList, sellList = {}, {}

    for i = 1, math.min(ExtraFunction.GetMaxPets(plr), #petsList) do
        table.insert(equipList, petsList[i].Name)
    end

    for i, pet in pairs(petsList) do
        if not table.find(equipList, pet.Name) and i > 7 then
            table.insert(sellList, pet.Name)
        end
    end

    PetNetwork:Fire({Event = "EquipBest", Pets = equipList})
    task.wait(0.5)
    PetNetwork:Fire({Event = "SellPet", Pets = sellList})
end

--- Fully Attack Enemy
local function fullyAttack(enemyTarget)
    local hrp = plr.Character.HumanoidRootPart
    if (hrp.Position - enemyTarget.Position).Magnitude > 10 then
        tweenfarm(enemyTarget.CFrame * CFrame.new(5, 0, 0))
    else
        local enemyId = setValue("EnemiesId", enemyTarget.Name)

        if PetIsAttackingGetId() ~= enemyTarget.Name then
            local goPet = {Event = "Attack", AttackType = "All", PetPos = {}, Enemy = enemyId}
            for _, pet in pairs(GetListPet()) do
                goPet.PetPos[pet] = enemyTarget.Position
            end
            PetNetwork:Fire(goPet)
            task.wait(0.5)
        end

        repeat task.wait(0.5)
            setValue("EnemiesId", enemyTarget.Name)
        until PetIsAttackingGetId() ~= enemyTarget.Name or not getgenv().Dungeon

        local captureTime = 0
        repeat task.wait(0.5)
            if fullRank6 and not indungeon then
                EnemyNetwork:Fire({Event = "EnemyDestroy", Enemy = enemyId})
            else
                EnemyNetwork:Fire({Event = "EnemyCapture", Enemy = enemyId})
            end
            captureTime = captureTime + 1
        until captureTime > 3

        setValue("blockenemies", enemyTarget.Name)
        if not indungeon then
            equipMaxPet()
        else
            table.insert(enemiesblockdungeon, enemyTarget.Name)
        end
        print("Concak")
    end
end

--- Auto Farm Function
local function AutoFarm()
    if getgenv().Dungeon and not indungeon then
        local Enemies = getEnemies2(true)
        if not Enemies[1] then
            for mapPrefix, mapCFrame in pairs(dataMap) do
                if Enemies[2]:find(mapPrefix) then
                    tweenfarm(mapCFrame)
                end
            end
        else
            fullyAttack(Enemies[1])
        end
        task.wait(2)
    elseif indungeon then
        fullyAttack(getEnemiesDungeon()[1])
        print("Concak")
    end
end

--- Auto Buy Slot
local function autoBuySlot()
    local attrs = plr.leaderstats.Passes:GetAttributes()
    if not attrs.ExtraEquip and (getgenv().config.buygamepass or getgenv().config.buyonlyslot) then
        GeneralNetwork:Fire({Type = "Pass", Event = "TicketShop", Name = "ExtraEquip"})
    elseif getgenv().config.buygamepass then
        for passName, hasPass in pairs(attrs) do
            if not hasPass then
                GeneralNetwork:Fire({Type = "Pass", Event = "TicketShop", Name = passName})
            end
        end
    end
end

--- Update DPS
local function updateDps()
    getgenv().MaxDPS = 0
    for _, petName in pairs(GetListPet()) do
        getgenv().MaxDPS = getgenv().MaxDPS + getPetDamage(petName)
    end

    if getgenv().MaxDPS == 0 then
        getgenv().MaxDPS = 2
    end

    getgenv().MaxDPS = getgenv().MaxDPS * 3
    print(getgenv().MaxDPS)

    task.wait(10)
    autoBuySlot()
end

task.spawn(function()
    while true do
        task.wait()
        pcall(updateDps)
    end
end)
--- Dungeon Function
local function FunctionDungeon()
    if not getgenv().Dungeon and getgenv().MaxDPS > 0 then
        for mapPrefix, requiredDPS in pairs(dataDungeon) do
            if getgenv().MaxDPS >= requiredDPS then
                tween(dataMap[mapPrefix])
                task.wait(5)
                if Workspace.__Main.__Dungeon:FindFirstChild("Dungeon") then
                    GeneralNetwork:Fire({Event = "DungeonAction", Action = "BuyTicket", Type = "Gems"})
                    GeneralNetwork:Fire({Event = "DungeonAction", Action = "Create"})
                    GeneralNetwork:Fire({Event = "DungeonAction", Action = "Start", Dungeon = plr.UserId})
                    task.wait(1)
                end
            end
        end
        getgenv().Dungeon = true
    end
end

--- Wait for next notification interval
local function waitUntilNextNotification(interval)
    local currentTime = os.time()
    local nextTime = math.ceil(currentTime / interval) * interval

    print("Waiting", nextTime - currentTime, "seconds until next notification.")
    task.wait(nextTime - currentTime)
end

equipMaxPet()

--- Dungeon status checker

-- Notification every 30 minutes
task.spawn(function()
    while true do
        task.wait(1)
        if getgenv().Dungeon then
            waitUntilNextNotification(1800)
            getgenv().Dungeon = false
        end
    end
end)

-- Continuously check and start Dungeon

task.spawn(function()
    while true do
        if not indungeon then
            pcall(FunctionDungeon)
        end
        task.wait(1)
    end
end)

--- Main Loop
while true do
    local success, result = pcall(AutoFarm)
    print(success, result)
    task.wait(0.3)
end
